generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

model Profile {
  id                     String          @id @default(uuid())
  userId                 String          @unique
  name                   String
  imageUrl               String?         @db.Text
  email                  String          @db.Text
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  type                   String          @default("user")
  channels               ChannelMember[] // New relation for many-to-many
  ownedChannels          Channel[]       @relation("OwnerChannels") // Channel owned by this profile
  lastSeen               DateTime?
  conversationsInitiated Conversation[]  @relation("ProfileOne")
  conversationsReceived  Conversation[]  @relation("ProfileTwo")
  groups                 Group[]         @relation("OwnerGroups")
  GroupMember            GroupMember[]
  online                 String          @default("last seen recently")
  DirectMessage          DirectMessage[]
  GroupMessage           GroupMessage[]
  Message                Message[]
  readMessages           GroupMessage[]  @relation("MessageReadBy")

  groupMessageId String?
}

model Channel {
  id          String          @id @default(uuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  members     ChannelMember[] // New relation for many-to-many
  messages    Message[] // Messages sent in the channel
  owner       Profile?        @relation("OwnerChannels", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String? // Channel owner who created it
  type        String          @default("channel")
  lastMessage String          @default("")
}

model ChannelMember {
  channelId String
  profileId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([channelId, profileId]) // Composite key to ensure uniqueness of channel-member relationship
}

model Message {
  id           String  @id @default(uuid())
  content      String  @db.Text
  files        Json?
  channelId    String
  deleted      Boolean @default(false)
  ownerId      String
  ownerProfile Profile @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  replyId String? // Поле для хранения ссылки на сообщение, на которое идет ответ (опциональное)

  replyToMessage Message? @relation("Reply", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Самоссылочная связь

  replies Message[] @relation("Reply") // Сообщения, которые отвечают на текущее

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
}

model Group {
  id          String         @id
  name        String
  image       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  ownerId     String
  owner       Profile?       @relation("OwnerGroups", fields: [ownerId], references: [id], onDelete: Cascade)
  messages    GroupMessage[]
  type        String         @default("group")
  members     GroupMember[] // New relation for many-to-many
  lastMessage String         @default("")
}

model GroupMember {
  id       String     @id @default(uuid())
  groupId  String
  memberId String
  role     MemberRole @default(MEMBER)
  group    Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  profile  Profile    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  @@unique([groupId, memberId])
}

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberOne      Profile         @relation("ProfileOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId    String
  memberTwo      Profile         @relation("ProfileTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  type           String          @default("conversation")
  directMessages DirectMessage[]
  lastMessage    String          @default("")

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String @id @default(uuid())
  content String @db.Text
  files   Json?

  memberId       String
  ownerProfile   Profile      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  replyId        String? // Поле для хранения ссылки на сообщение, на которое идет ответ (опциональное)
  replyToMessage DirectMessage?  @relation("Reply", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Самоссылочная связь
  isRead         Boolean         @default(false)
  replies        DirectMessage[] @relation("Reply") // Сообщения, которые отвечают на текущее

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model GroupMessage {
  id      String @id @default(uuid())
  content String @db.Text
  files   Json?

  memberId       String
  ownerProfile   Profile       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  groupId        String
  group          Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  replyId        String? // Поле для хранения ссылки на сообщение, на которое идет ответ (опциональное)
  replyToMessage GroupMessage? @relation("Reply", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Самоссылочная связь

  replies GroupMessage[] @relation("Reply") // Сообщения, которые отвечают на текущее

  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  readBy    Profile[] @relation("MessageReadBy")

  @@index([memberId])
  @@index([groupId])
}
