generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
  GUEST
}

model Profile {
  id                    String          @id @default(uuid())
  userId                String          @unique
  name                  String
  imageUrl              String?         @db.Text
  email                 String          @db.Text
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  type                  String          @default("user")
  channels              ChannelMember[] // New relation for many-to-many
  ownedChannels         Channel[]       @relation("OwnerChannels") // Channel owned by this profile
  lastSeen              DateTime?
  conversationsInitiated Conversation[]  @relation("ProfileOne")
  conversationsReceived Conversation[]  @relation("ProfileTwo")
  groups Group[] @relation("OwnerGroups")
}

model Channel {
  id          String          @id @default(uuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  members     ChannelMember[] // New relation for many-to-many
  messages    Message[] // Messages sent in the channel
  owner       Profile?        @relation("OwnerChannels", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String? // Channel owner who created it
  type        String          @default("channel")
}

model ChannelMember {
  channelId String
  profileId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([channelId, profileId]) // Composite key to ensure uniqueness of channel-member relationship
}

model Message {
  id        String  @id @default(uuid())
  content   String  @db.Text
  fileUrl   String? @db.Text
  channelId String
  deleted   Boolean @default(false)
  isOwn     Boolean @default(false)

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
}

model Group {
  id          String   @id
  name        String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       Profile? @relation("OwnerGroups", fields: [ownerId], references: [id], onDelete: Cascade)
  messages GroupMessage[]
  members GroupMember[] // New relation for many-to-many
}

model GroupMember {
  id       String @id @default(uuid())
  groupId  String
  memberId String
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

// model Member {
//   id        String @id @default(uuid())
//   profileId String

//   profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

//   conversationsInitiated Conversation[] @relation("MemberOne")
//   conversationsReceived  Conversation[] @relation("MemberTwo")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([profileId])
// }

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberOne      Profile         @relation("ProfileOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId    String
  memberTwo      Profile         @relation("ProfileTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  type           String          @default("conversation")
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model GroupMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String

  groupId String
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([groupId])
}
